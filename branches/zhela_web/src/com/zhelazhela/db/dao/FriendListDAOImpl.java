package com.zhelazhela.db.dao;

import com.zhelazhela.db.model.FriendList;
import com.zhelazhela.db.model.FriendListExample;
import com.zhelazhela.domain.SNSUserBaseinfo;

import java.util.List;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class FriendListDAOImpl extends SqlMapClientDaoSupport implements FriendListDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public FriendListDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public int countByExample(FriendListExample example) {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("friend_list.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public int deleteByExample(FriendListExample example) {
        int rows = getSqlMapClientTemplate().delete("friend_list.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public void insert(FriendList record) {
        getSqlMapClientTemplate().insert("friend_list.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public void insertSelective(FriendList record) {
        getSqlMapClientTemplate().insert("friend_list.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    @SuppressWarnings("unchecked")
    public List<FriendList> selectByExample(FriendListExample example) {
        List<FriendList> list = getSqlMapClientTemplate().queryForList("friend_list.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public int updateByExampleSelective(FriendList record, FriendListExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("friend_list.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    public int updateByExample(FriendList record, FriendListExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("friend_list.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table friend_list
     *
     * @ibatorgenerated Fri Feb 12 23:38:36 CST 2010
     */
    private static class UpdateByExampleParms extends FriendListExample {
        private Object record;

        public UpdateByExampleParms(Object record, FriendListExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

	@SuppressWarnings("unchecked")
	@Override
	public List<SNSUserBaseinfo> loadUserBeenTracked(long userid,
			List<Long> blockedUser, int page, int pagesize) {
		java.util.Map<String,Object> map = new java.util.HashMap<String,Object>();
		map.put("user_id", userid);
		if(pagesize>0){
			map.put("limit", ""+(page-1)*pagesize+","+pagesize);
		}
		if(blockedUser!=null&&blockedUser.size()>0){
			map.put("been_blocked", blockedUser);
		}
		List<SNSUserBaseinfo> list = getSqlMapClientTemplate().queryForList("friend_list.loadUserBeenTrackedByUser", map);
        return list;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SNSUserBaseinfo> loadUserTracked(long userid,
			List<Long> blockedUser, int page, int pagesize) {
		java.util.Map<String,Object> map = new java.util.HashMap<String,Object>();
		map.put("user_id", userid);
		if(pagesize>0){
			map.put("limit", ""+(page-1)*pagesize+","+pagesize);
		}
		if(blockedUser!=null&&blockedUser.size()>0){
			map.put("been_blocked", blockedUser);
		}
		List<SNSUserBaseinfo> list = getSqlMapClientTemplate().queryForList("friend_list.loadUserTrackByUser", map);
        return list;
	}

	@Override
	public int countUserBeenTracked(long userid, List<Long> blockedUser) {
		java.util.Map<String,Object> map = new java.util.HashMap<String,Object>();
		map.put("user_id", userid);
		if(blockedUser!=null&&blockedUser.size()>0){
			map.put("been_blocked", blockedUser);
		}
		Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("friend_list.countUserBeenTrackedByUser", map);
        return count;
	}

	@Override
	public int countUserTracked(long userid, List<Long> blockedUser) {
		java.util.Map<String,Object> map = new java.util.HashMap<String,Object>();
		map.put("user_id", userid);
		if(blockedUser!=null&&blockedUser.size()>0){
			map.put("been_blocked", blockedUser);
		}
		Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("friend_list.countUserTrackByUser", map);
        return count;
	}
}